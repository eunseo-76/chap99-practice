<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- http 에서 s 붙이면 보기 싫은 거 없어짐 왜지 ?-->


<!-- * 주석을 지우고 각각 알맞은 태그를 활용하여 내용을 작성하세요. -->

<!-- 1. namesapce 설정을 알맞게 지정하세요. -->
    <!-- 2. ProductDTO type의 resultMap을 설정하세요. -->
<mapper namespace="com.management.product.model.dao.ProductDAO">
    <resultMap id="productResultMap" type="com.management.product.model.dto.ProductDTO">
        <id property="productCode" column="product_code"/>
        <id property="productName" column="product_name"/>
        <id property="originCost" column="origin_cost"/>
        <id property="releaseDate" column="release_date"/>
        <id property="discountRate" column="discount_rate"/>
        <id property="salesQuantity" column="sales_quantity"/>
        <id property="stockQuantity" column="stock_quantity"/>
        <id property="categoryCode" column="category_code"/>
        <id property="productionStatus" column="production_status"/>
    </resultMap>


    <!-- 3. 전체 목록을 조회하는 쿼리를 작성하세요.
            (쿼리id) selectAllProductList -->
    <select id="selectAllProductList" resultMap="productResultMap">
        SELECT
            *
          FROM product_info
    </select>

    <!-- 4. 조건에 따른 목록을 조회하는 쿼리를 작성하세요.
            (쿼리id) selectProductByCondition
            (참고 1) 제품명 조회인 경우, 검색어를 '포함'한 모든 제품을 조회합니다.
                     (예시) '솔' 검색 -> 솔방울, 칫솔 등 '솔' 포함 제품 모두 조회
            (참고 2) 판매점 유형별 조회의 경우,
                     '백화점'이면 할인율이 0%인 제품, '아울렛'이면 할인율이 1% 이상인 제품을 조회합니다.
            (참고 3) 이달의 신상품 조희의 경우, 출시일이 이번 달인 제품(예를 들어, 현재 기준이면 2023년 5월 출시 제품)울 조회합니다. -->
    <select id="selectProductByCondition" resultMap="productResultMap">
        SELECT
                product_code
              , product_name
              , origin_cost
              , release_date
              , discount_rate
              , sales_quantity
              , stock_quantity
              , category_code
              , production_status
          FROM product_info
        <trim prefix="WHERE" prefixOverrides="AND | OR">
            <if test="option == 'productName'">
                product_name LIKE CONCAT('%', #{ value }, '%')
            </if>
            <if test="option == 'salesStore' and value == '백화점'">
                AND discount_rate = 0
            </if>
            <if test="option == 'salesStore' and value == '아울렛'">
                <![CDATA[
                AND discount_rate >= 1
                ]]>
            </if>
            <if test="option == 'newProduct'">
<!--                더미 데이터가 모두 23년 정보이기 때문에 이달의 신제품 확인용으로 날짜를 23년 5월로 지정-->
<!--                AND YEAR(release_date) = YEAR('2023-05-05')-->
<!--                AND MONTH(release_date) = MONTH('2023-05-05')-->
                AND YEAR(release_date) = YEAR(CURDATE())
                AND MONTH(release_date) = MONTH(CURDATE())
            </if>
            <if test="option == 'nonProduction'">
                AND production_status = 'N'
            </if>
        </trim>
    </select>


    <!-- 5. 제품 정보를 등록하는 쿼리를 작성하세요.
            (쿼리id) insertProduct -->
    <insert id="insertProduct">
        INSERT INTO
            product_info(
                product_name
              , origin_cost
              , release_date
              , discount_rate
              , sales_quantity
              , stock_quantity
              , category_code
              , production_status
        )
        VALUES
        (
        #{ productName },
        #{ originCost },
        #{ releaseDate },
        #{ discountRate },
        #{ salesQuantity },
        #{ stockQuantity },
        #{ categoryCode },
        #{ productionStatus }
        )
    </insert>

    <!-- 6. 사용자가 수정을 원하는 데이터만 수정하도록 Dynamic Query를 활용한 쿼리를 작성하세요.
            (쿼리id) updateProduct -->
    <update id="updateProduct">
        UPDATE product_info
        <set>
            <if test="productName != 'SKIP'">
                product_name = #{ productName },
            </if>
            <if test="originCost != 'SKIP'">
                origin_cost = #{ originCost },
            </if>
            <if test="releaseDate != 'SKIP'">
                release_date = #{ releaseDate },
            </if>
            <if test="discountRate != 'SKIP'">
                discount_rate = #{ discountRate },
            </if>
            <if test="salesQuantity != 'SKIP'">
                sales_quantity = #{ salesQuantity },
            </if>
            <if test="stockQuantity != 'SKIP'">
                stock_quantity = #{ stockQuantity },
            </if>
            <if test="categoryCode != 'SKIP'">
                category_code = #{ categoryCode },
            </if>
            <if test="productionStatus != 'SKIP'">
                production_status = #{ productionStatus },
            </if>
        </set>
        WHERE product_code = #{ productCode }
    </update>

    <!-- 7. 제품 정보를 삭제하는 쿼리를 작성하세요.
            (쿼리id) deleteProduct -->
    <delete id="deleteProduct">
        DELETE
          FROM
                product_info
        WHERE
                product_code = #{ productCode }
    </delete>
</mapper>
